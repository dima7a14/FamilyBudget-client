{"version":3,"sources":["serviceWorker.ts","index.tsx","views/Home/index.tsx","layouts/Default/styles.ts","layouts/Default/index.tsx","views/Auth/styles.ts","views/Auth/SignInForm.tsx","views/Auth/SignUpForm.tsx","views/Auth/index.tsx","views/Transactions/Table/cells/DateCell.tsx","views/Transactions/Table/cells/PriceCell/utils.tsx","views/Transactions/Table/cells/PriceCell/styles.ts","views/Transactions/Table/cells/PriceCell/index.tsx","views/Transactions/Table/styles.ts","views/Transactions/Table/index.tsx","views/Transactions/index.tsx","views/Tasks/index.tsx","views/Statistics/index.tsx","views/NotFound/index.tsx","router/index.tsx","layouts/App/index.tsx","layouts/App/styles.module.scss","partials/Header/Menu.tsx","partials/Header/styles.ts","partials/Header/index.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Home","useStyles","createUseStyles","defaultLayout","display","flexDirection","flexWrap","justifyContent","height","background","content","flexGrow","overflow","margin","width","alignItems","footer","backgroundColor","Colors","DARK_GRAY2","padding","textAlign","color","WHITE","fontSize","lineHeight","DefaultLayout","children","classes","className","container","border","LIGHT_GRAY1","borderRadius","header","LIGHT_GRAY4","title","fontWeight","DARK_GRAY3","body","formGroup","marginBottom","buttons","linkText","forms","transformStyle","position","form","left","formWidth","top","signInEnter","opacity","transform","signInEnterActive","transition","signInExit","signInExitActive","signUpEnter","signUpEnterActive","signUpExit","signUpExitActive","SignInForm","props","firstInputEl","useRef","useEffect","current","focus","classNames","label","leftIcon","type","large","inputRef","text","intent","to","paths","signUp","path","icon","SignUpForm","signIn","Auth","useLocation","Default","CSSTransition","in","pathname","timeout","unmountOnExit","enter","enterActive","exit","exitActive","DateCell","value","onChange","formatDate","useCallback","date","moment","format","parseDate","str","toDate","changeDate","selectedDate","isUserChange","defaultValue","showActionsBar","highlightCurrentDay","fill","filterCurrency","query","item","index","exactMatch","normalizedItem","toLowerCase","normalizedQuery","indexOf","renderCurrency","currency","handleClick","modifiers","matchesPredicate","active","disabled","key","onClick","getSymbolFromCurrency","selectPopover","Classes","MENU","maxHeight","CurrencySelect","Select","ofType","PriceCell","formattedValue","useMemo","Intl","NumberFormat","undefined","style","codes","getCodes","items","itemPredicate","itemRenderer","onItemSelect","popoverProps","popoverClassName","rightIcon","coeffs","cell","fullWidthCell","TransactionsTable","useState","map","c","innerWidth","widths","setWidths","enableRowResizing","enableColumnResizing","numRows","defaultRowHeight","columnWidths","onColumnWidthChanged","size","newWidths","slice","name","cellRenderer","row","DATA","tooltip","description","editableTextProps","multiline","parseFloat","price","Transactions","Table","Tasks","Statistics","NotFound","home","transactions","tasks","statistics","Routes","exact","hot","module","styles","app","exports","HeaderMenu","balance","marginLeft","Header","history","useHistory","fixedToTop","align","MONOSPACE_TEXT","TEXT_LARGE","push","Menu"],"mappings":"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","file":"static/js/main.8368d9e2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Index is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'layouts/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'theme/styles.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\n\nconst Home: React.FC = () => <div>Home page</div>;\n\nexport default Home;\n","import { Colors } from '@blueprintjs/core';\nimport { createUseStyles } from 'react-jss';\n\nexport const useStyles = createUseStyles({\n  defaultLayout: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    justifyContent: 'flex-end',\n    height: '100%',\n    background: 'linear-gradient(120deg, #e8f8b6 2%, #e5e5e5 100%)',\n  },\n  content: {\n    flexGrow: 1,\n    overflow: 'auto',\n    margin: 'auto',\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  footer: {\n    backgroundColor: Colors.DARK_GRAY2,\n    padding: '.5rem',\n    textAlign: 'center',\n    color: Colors.WHITE,\n    fontSize: 12,\n    lineHeight: '1.5em',\n  },\n});\n","import React from 'react';\n\nimport { useStyles } from './styles';\n\nconst DefaultLayout: React.FC = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <section className={classes.defaultLayout}>\n      <div className={classes.content}>\n        {children}\n      </div>\n      <footer className={classes.footer}>&copy; Family Budget 2020</footer>\n    </section>\n  );\n};\n\nexport default DefaultLayout;\n","import { Colors } from '@blueprintjs/core';\nimport { createUseStyles } from 'react-jss';\n\nconst transition = 'all 1000ms';\nconst slide = '100px';\nconst formWidth = 320;\n\nexport const useStyles = createUseStyles({\n  container: {\n    width: formWidth,\n    border: `1px solid ${Colors.LIGHT_GRAY1}`,\n    borderRadius: 10,\n    backgroundColor: Colors.WHITE,\n    overflow: 'hidden',\n  },\n  header: {\n    padding: '.5rem',\n    backgroundColor: Colors.LIGHT_GRAY4,\n    textAlign: 'center',\n  },\n  title: {\n    margin: 0,\n    fontWeight: 500,\n    fontSize: '150%',\n    color: Colors.DARK_GRAY3,\n  },\n  body: {\n    padding: '1rem',\n  },\n  formGroup: {\n    marginBottom: '2rem',\n  },\n  buttons: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  linkText: {\n    margin: '0 .5em',\n  },\n  forms: {\n    transformStyle: 'preserve-3d',\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n  },\n  form: {\n    position: 'absolute',\n    left: `calc(50% - ${formWidth / 2}px)`,\n    top: '20%',\n  },\n  signInEnter: {\n    opacity: 0,\n    transform: `translate(-${slide})`,\n  },\n  signInEnterActive: {\n    opacity: 1,\n    transform: 'translate(0)',\n    transition,\n  },\n  signInExit: {\n    opacity: 1,\n    transform: 'translate(0)',\n  },\n  signInExitActive: {\n    opacity: 0,\n    transform: `translate(-${slide})`,\n    transition,\n  },\n  signUpEnter: {\n    opacity: 0,\n    transform: `translate(${slide})`,\n  },\n  signUpEnterActive: {\n    opacity: 1,\n    transform: 'translate(0)',\n    transition,\n  },\n  signUpExit: {\n    opacity: 1,\n    transform: 'translate(0)',\n  },\n  signUpExitActive: {\n    opacity: 0,\n    transform: `translate(${slide})`,\n    transition,\n  },\n});\n","import React, { useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  FormGroup,\n  InputGroup,\n  Button,\n  Icon,\n} from '@blueprintjs/core';\nimport classNames from 'classnames';\n\nimport { paths } from 'router';\n\nimport { useStyles } from './styles';\n\ninterface IProps {\n  className?: string;\n}\n\nconst SignInForm: React.FC<IProps> = props => {\n  const { className } = props;\n  const classes = useStyles();\n  const firstInputEl = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (firstInputEl.current) {\n      firstInputEl.current.focus();\n    }\n  }, []);\n\n  return (\n    <section className={classNames(classes.container, className)}>\n      <header className={classes.header}>\n        <h3 className={classes.title}>Sign In</h3>\n      </header>\n      <div className={classes.body}>\n        <FormGroup\n          label=\"E-mail\"\n          className={classes.formGroup}\n        >\n          <InputGroup\n            leftIcon=\"envelope\"\n            type=\"email\"\n            large\n            // @ts-ignore TODO: maybe problem in library type.\n            inputRef={firstInputEl}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Password\"\n          className={classes.formGroup}\n        >\n          <InputGroup leftIcon=\"key\" type=\"password\" large />\n        </FormGroup>\n        <div className={classes.buttons}>\n          <Button text=\"Submit\" large intent=\"primary\" />\n          <Link to={paths.signUp.path}>\n            <span className={classes.linkText}>Sign Up</span>\n            <Icon icon=\"arrow-right\" />\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SignInForm;\n","import React, { useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  FormGroup,\n  InputGroup,\n  Button,\n  Icon,\n} from '@blueprintjs/core';\nimport classNames from 'classnames';\n\nimport { paths } from 'router';\n\nimport { useStyles } from './styles';\n\ninterface IProps {\n  className?: string;\n}\n\nconst SignUpForm: React.FC<IProps> = props => {\n  const { className } = props;\n  const classes = useStyles();\n  const firstInputEl = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (firstInputEl.current) {\n      firstInputEl.current.focus();\n    }\n  }, []);\n\n  return (\n    <section className={classNames(classes.container, className)}>\n      <header className={classes.header}>\n        <h3 className={classes.title}>Sign Up</h3>\n      </header>\n      <div className={classes.body}>\n        <FormGroup\n          label=\"Full name\"\n          className={classes.formGroup}\n        >\n          <InputGroup\n            leftIcon=\"person\"\n            type=\"text\"\n            large\n            // @ts-ignore TODO: maybe problem in library type.\n            inputRef={firstInputEl}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"E-mail\"\n          className={classes.formGroup}\n        >\n          <InputGroup leftIcon=\"envelope\" type=\"email\" large />\n        </FormGroup>\n        <FormGroup\n          label=\"Password\"\n          className={classes.formGroup}\n        >\n          <InputGroup leftIcon=\"key\" type=\"password\" large />\n        </FormGroup>\n        <div className={classes.buttons}>\n          <Button text=\"Submit\" large intent=\"primary\" />\n          <Link to={paths.signIn.path}>\n            <Icon icon=\"arrow-left\" />\n            <span className={classes.linkText}>Sign In</span>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SignUpForm;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useLocation } from 'react-router-dom';\n\nimport { paths } from 'router';\n\nimport DefaultLayout from 'layouts/Default';\n\nimport SignInForm from './SignInForm';\nimport SignUpForm from './SignUpForm';\nimport { useStyles } from './styles';\n\n\n// TODO: add Formik\n\n/** Component */\nconst Auth: React.FC = () => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  return (\n    <>\n      <DefaultLayout>\n        <div className={classes.forms}>\n          <CSSTransition\n            in={location.pathname === paths.signIn.path}\n            timeout={1000}\n            unmountOnExit\n            classNames={{\n              enter: classes.signInEnter,\n              enterActive: classes.signInEnterActive,\n              exit: classes.signInExit,\n              exitActive: classes.signInExitActive,\n            }}\n          >\n            <SignInForm className={classes.form} />\n          </CSSTransition>\n          <CSSTransition\n            in={location.pathname === paths.signUp.path}\n            timeout={500}\n            unmountOnExit\n            classNames={{\n              enter: classes.signUpEnter,\n              enterActive: classes.signUpEnterActive,\n              exit: classes.signUpExit,\n              exitActive: classes.signUpExitActive,\n            }}\n          >\n            <SignUpForm className={classes.form} />\n          </CSSTransition>\n        </div>\n      </DefaultLayout>\n    </>\n  );\n};\n\nexport default Auth;\n","import React, { useCallback } from 'react';\nimport { DatePicker } from '@blueprintjs/datetime';\nimport { Popover } from '@blueprintjs/core';\nimport moment from 'moment';\n\n\ninterface IProps {\n  value: string;\n  onChange(val: Date): void;\n}\n\nconst FORMAT = 'YYYY-MM-DD HH:mm';\n\nconst DateCell: React.FC<IProps> = ({ value, onChange }) => {\n  const formatDate = useCallback((date: Date) => moment(date).format(FORMAT), []);\n  const parseDate = useCallback((str: string) => moment(str, FORMAT).toDate(), []);\n  const changeDate = useCallback((selectedDate: Date, isUserChange) => {\n    if (isUserChange) {\n      onChange(selectedDate);\n    }\n  }, []);\n\n  return (\n    <Popover\n      content={<DatePicker\n        defaultValue={parseDate(value)}\n        showActionsBar\n        highlightCurrentDay\n        onChange={changeDate}\n      />}\n      fill\n    >\n      {formatDate(parseDate(value))}\n    </Popover>\n  );\n};\n\nexport default DateCell;\n","import React from 'react';\nimport { MenuItem } from '@blueprintjs/core';\nimport { ItemRenderer, ItemPredicate } from '@blueprintjs/select';\nimport getSymbolFromCurrency from 'currency-symbol-map';\n\n\nexport const filterCurrency: ItemPredicate<string> = (query, item, index, exactMatch) => {\n  const normalizedItem = item.toLowerCase();\n  const normalizedQuery = query.toLowerCase();\n\n  if (exactMatch) {\n    return normalizedItem === normalizedQuery;\n  }\n\n  return normalizedItem.indexOf(normalizedQuery) >= 0;\n};\n\nexport const renderCurrency: ItemRenderer<string> = (currency, { handleClick, modifiers, query }) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n\n  return (\n    <MenuItem\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      text={currency}\n      key={currency}\n      onClick={handleClick}\n      label={getSymbolFromCurrency(currency)}\n    />\n  );\n};\n","import { createUseStyles } from 'react-jss';\nimport { Classes } from '@blueprintjs/core';\n\nexport const useStyles = createUseStyles({\n  selectPopover: {\n    [`& .${Classes.MENU}`]: {\n      maxHeight: 300,\n      overflow: 'auto',\n    },\n  },\n});\n","import React, { useMemo } from 'react';\nimport {\n  ControlGroup,\n  NumericInput,\n  Button,\n} from '@blueprintjs/core';\nimport { Select } from '@blueprintjs/select';\nimport { Popover } from '@blueprintjs/core';\nimport { codes as getCodes } from 'currency-codes';\nimport getSymbolFromCurrency from 'currency-symbol-map';\n\nimport { renderCurrency, filterCurrency } from './utils';\nimport { useStyles } from './styles';\n\n\ninterface IProps {\n  value: number;\n  currency: string;\n  onChange(price: number, currency: string): void;\n}\n\nconst CurrencySelect = Select.ofType<string>();\n\nconst PriceCell: React.FC<IProps> = ({ value, currency, onChange }) => {\n  const classes = useStyles();\n  const formattedValue = useMemo(() =>\n    new Intl.NumberFormat(undefined, { style: 'currency', currency }), [currency]).format(value);\n  const codes = useMemo(() => getCodes(), []);\n\n\n  return (\n    <Popover\n      content={\n        <ControlGroup>\n          <NumericInput value={value} />\n          <CurrencySelect\n            items={codes}\n            itemPredicate={filterCurrency}\n            itemRenderer={renderCurrency}\n            onItemSelect={() => null}\n            popoverProps={{ popoverClassName: classes.selectPopover }}\n          >\n            <Button\n              rightIcon=\"caret-down\"\n              text={getSymbolFromCurrency(currency) || 'No selection'}\n            />\n          </CurrencySelect>\n          <Button intent=\"primary\" icon=\"small-tick\" />\n        </ControlGroup>\n      }\n      fill\n    >\n      {formattedValue}\n    </Popover>\n  );\n};\n\nexport default PriceCell;\n","import { createUseStyles } from 'react-jss';\n\nexport const coeffs = [0.15, 0.6, 0.125, 0.125];\n\nexport const rowHeight = 30;\n\nexport const useStyles = createUseStyles({\n  cell: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    height: '100%',\n  },\n  fullWidthCell: {\n    '& > div': {\n      width: '100%',\n    },\n  },\n});\n","import React, { useState } from 'react';\nimport {\n  Column,\n  EditableCell,\n  Table,\n  Cell,\n} from '@blueprintjs/table';\nimport classNames from 'classnames';\n\nimport DateCell from './cells/DateCell';\nimport PriceCell from './cells/PriceCell';\nimport { useStyles, coeffs, rowHeight } from './styles';\nimport DATA from './MOCK_DATA.json';\n\ninterface IItem { // TODO: temporary item schema.\n  id: number;\n  name: string;\n  description: string;\n  category: number;\n  date: string;\n  price: number;\n  currency: string;\n}\n\nconst TransactionsTable: React.FC = () => {\n  const classes = useStyles();\n  const [widths, setWidths] = useState<number[]>(coeffs.map(c => (window.innerWidth - 30) * c));\n\n  const updateColWidth = (index: number, size: number) => {\n    const newWidths = [...widths.slice(0, index), size, ...widths.slice(index + 1)];\n    \n    setWidths(newWidths);\n  };\n\n  const renderName = (row: number) => (\n    <EditableCell\n      value={DATA[row].name}\n      tooltip={DATA[row].name}\n      className={classes.cell}\n    />\n  );\n\n  const renderDescription = (row: number) => (\n    <EditableCell\n      value={DATA[row].description}\n      editableTextProps={{ multiline: true }}\n      tooltip={DATA[row].description}\n      className={classes.cell}\n    />\n  );\n\n  const renderDate = (row: number) => (\n    <Cell className={classNames(classes.cell, classes.fullWidthCell)}>\n      <DateCell value={DATA[row].date} onChange={() => null} />\n    </Cell>\n  );\n\n  const renderPrice = (row: number) => (\n    <Cell className={classNames(classes.cell, classes.fullWidthCell)}>\n      <PriceCell\n        value={parseFloat(DATA[row].price)}\n        currency={DATA[row].currency}\n        onChange={() => null}\n      />\n    </Cell>\n  );\n\n  return (\n    <Table\n      enableRowResizing\n      enableColumnResizing\n      numRows={1000}\n      defaultRowHeight={rowHeight}\n      columnWidths={widths}\n      onColumnWidthChanged={updateColWidth}\n    >\n      <Column name=\"Title\" cellRenderer={renderName} />\n      <Column name=\"Description\" cellRenderer={renderDescription} />\n      <Column name=\"Date\" cellRenderer={renderDate} />\n      <Column name=\"Price\" cellRenderer={renderPrice} />\n    </Table>\n  );\n};\n\nexport default TransactionsTable;\n","import React from 'react';\n\nimport DefaultLayout from 'layouts/Default';\n\nimport Table from './Table';\n\nconst Transactions: React.FC = () => {\n  return (\n    <DefaultLayout>\n      <Table />\n    </DefaultLayout>\n  );\n};\n\nexport default Transactions;\n","import React from 'react';\n\n\nconst Tasks: React.FC = () => <div>Tasks</div>;\n\nexport default Tasks;\n","import React from 'react';\n\nconst Statistics: React.FC = () => <div>Statistics</div>;\n\nexport default Statistics;\n","import React from 'react';\n\n\nconst NotFound: React.FC = () => <div>Not found</div>;\n\nexport default NotFound;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from 'views/Home';\nimport Auth from 'views/Auth';\nimport Transactions from 'views/Transactions';\nimport Tasks from 'views/Tasks';\nimport Statistics from 'views/Statistics';\nimport NotFound from 'views/NotFound';\n\nexport const paths = {\n  home: {\n    name: 'home',\n    path: '/'\n  },\n  signIn: {\n    name: 'signIn',\n    path: '/sign-in'\n  },\n  signUp: {\n    name: 'signUp',\n    path: '/sign-up'\n  },\n  transactions: {\n    name: 'transactions',\n    path: '/transactions'\n  },\n  tasks: {\n    name: 'tasks',\n    path: '/tasks'\n  },\n  statistics: {\n    name: 'statistics',\n    path: '/statistics'\n  }\n};\n\nexport const Routes: React.FC = () => (\n  <Switch>\n    <Route path={paths.home.path} exact>\n      <Home />\n    </Route>\n    <Route path={[paths.signIn.path, paths.signUp.path]}>\n      <Auth />\n    </Route>\n    <Route path={paths.transactions.path}>\n      <Transactions />\n    </Route>\n    <Route path={paths.tasks.path}>\n      <Tasks />\n    </Route>\n    <Route path={paths.statistics.path}>\n      <Statistics />\n    </Route>\n    <Route path=\"/\">\n      <NotFound />\n    </Route>\n  </Switch>\n);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { hot } from 'react-hot-loader';\n\nimport { Routes } from 'router';\nimport Header from 'partials/Header';\n\nimport styles from './styles.module.scss';\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Header />\n      <div className={styles.app}>\n        <Routes />\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default hot(module)(App);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app___hR0s\"};","import React from 'react';\nimport { Menu, MenuItem, MenuDivider } from '@blueprintjs/core';\n\nconst HeaderMenu: React.FC = () => (\n  <Menu>\n    <MenuItem text=\"Account\" icon=\"user\" />\n    <MenuItem text=\"Family\" icon=\"home\" />\n    <MenuDivider />\n    <MenuItem text=\"Log out\" icon=\"log-out\" />\n  </Menu>\n);\n\nexport default HeaderMenu;\n","import { Colors } from '@blueprintjs/core';\nimport { createUseStyles } from 'react-jss';\n\nexport const useStyles = createUseStyles({\n  header: {\n    backgroundColor: Colors.LIGHT_GRAY4,\n  },\n  balance: {\n    marginLeft: '.5rem',\n  },\n});\n","import React from 'react';\nimport {\n  Navbar,\n  NavbarGroup,\n  NavbarDivider,\n  NavbarHeading,\n  ButtonGroup,\n  Button,\n  Popover,\n  Classes,\n} from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { paths } from 'router';\n\nimport Menu from './Menu';\nimport { useStyles } from './styles';\n\nconst Header: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Navbar className={classes.header} fixedToTop>\n      <NavbarGroup align=\"left\">\n        <NavbarHeading>Family Budget App</NavbarHeading>\n        <NavbarDivider />\n        Balance:\n        <h5 className={classNames(Classes.MONOSPACE_TEXT, Classes.TEXT_LARGE, classes.balance)}>$250</h5>\n      </NavbarGroup>\n      <NavbarGroup align=\"right\">\n        <ButtonGroup large>\n          <Button\n            icon=\"th\"\n            text=\"Transactions\"\n            onClick={() => history.push(paths.transactions.path)}\n            intent={location.pathname === paths.transactions.path ? 'primary' : 'none'}\n          />\n          <Button\n            icon=\"form\"\n            text=\"Tasks\"\n            disabled\n            onClick={() => history.push(paths.tasks.path)}\n            intent={location.pathname === paths.tasks.path ? 'primary' : 'none'}\n          />\n          <Button\n            icon=\"timeline-area-chart\"\n            text=\"Statistics\"\n            disabled\n            onClick={() => history.push(paths.statistics.path)}\n            intent={location.pathname === paths.statistics.path ? 'primary' : 'none'}\n          />\n          <Popover content={<Menu />}>\n            <Button icon=\"cog\" />\n          </Popover>\n        </ButtonGroup>\n      </NavbarGroup>\n    </Navbar>\n  );\n};\n\nexport default Header;\n"],"sourceRoot":""}